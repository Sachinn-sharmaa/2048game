

    for i in range(4):
        pos = 0
        for j in range(4):
            if mat[i][j] != 0:
                new_mat[i][pos] = mat[i][j]
                pos +=1
                # if j != pos:
                #     changed = True
                # pos += 1
    return new_mat

def Merge(mat):
    # changed = False
    for i in range(4):
        for j in range(3):
            if mat[i][j] == mat[i][j+1] and mat[i][j] != 0:
                mat[i][j] = mat[i][j] * 2
                # changed = True
                mat[i][j+1] = 0
    return mat 
                
def Reverse(mat):
    new_mat = []
    for i in range(4):
        new_mat.append([])
        for j in range(4):
            new_mat[i].append(mat[i][4-j-1])
    return new_mat

def Transpose(mat):
    new_mat = []
    for i in range(4):
        new_mat.append([])
        for j in range(4):
            new_mat[i].append(mat[j][i])
    return new_mat

def Move_down(grid):
    transposed_grid = Transpose(grid)
    new_grid = Reverse(transposed_grid)
    new_grid = Compression_mat(new_grid)
    new_grid = Merge(new_grid)
    # changed = changed1 or changed2
    new_grid = Compression_mat(new_grid)
    final_reverse_grid = Reverse(new_grid)
    final_grid = Transpose(final_reverse_grid)
    return final_grid

def Move_Up(grid):
    transposed_grid = Transpose(grid)
    new_grid = Compression_mat(transposed_grid)
    new_grid = Merge(new_grid)
    # changed = changed1 or changed2
    new_grid = Compression_mat(new_grid)
    final_grid = Transpose(new_grid)
    return final_grid

def Move_right(grid):
    new_reverse_grid = Reverse(grid) 
    new_grid = Compression_mat(new_reverse_grid)
    new_grid = Merge(new_grid)
    # changed = changed1 or changed2
    new_grid = Compression_mat(new_grid)
    final_grid = Reverse(new_grid)
    return final_grid
    

def Move_left(grid):
    new_grid = Compression_mat(grid)
    new_grid = Merge(new_grid)
    # changed = changed1 or changed2
    new_grid = Compression_mat(new_grid)
    return new_grid
    
    
def Check_curr_state(mat):
    for i in range(4):
        for j in range(4):
            if (mat[i][j] == 2048):
                return "WON"
    
    for i in range(4):
        for j in range(4):
            if (mat[i][j] == 0):
                return "GAME NOT OVER"
            
    for i in range(3):
        for j in range(3):
            if mat[i][j] == mat[i+1][j] or mat[i][j] == mat[i][j+1]:
                return "GAME NOT OVER"
            
    for j in range(3):
        if mat[3][j] == mat[3][j+1]:
            return "GAME NOT OVER"
        
    for i in range(3):
        if mat[i][3] == mat[i+1][3]:
            return "Game Not Over"
        
    return "LOST"